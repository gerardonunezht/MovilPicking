//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.5477.
// 
namespace Picking.PickingWS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebService1Soap", Namespace="http://tempuri.org/")]
    public partial class WebService1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public WebService1() {
            this.Url = "http://192.168.1.22/PickingWS/WebService1.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginHelloWorld(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("HelloWorld", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndHelloWorld(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/enviar_mensaje_evento", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool enviar_mensaje_evento(string pEvento, string pDescripcion, string pAsunto, string pZona, string pPicking, string pArea, string pLocalizacion, string pInvcNbr, string pUsuario) {
            object[] results = this.Invoke("enviar_mensaje_evento", new object[] {
                        pEvento,
                        pDescripcion,
                        pAsunto,
                        pZona,
                        pPicking,
                        pArea,
                        pLocalizacion,
                        pInvcNbr,
                        pUsuario});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginenviar_mensaje_evento(string pEvento, string pDescripcion, string pAsunto, string pZona, string pPicking, string pArea, string pLocalizacion, string pInvcNbr, string pUsuario, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("enviar_mensaje_evento", new object[] {
                        pEvento,
                        pDescripcion,
                        pAsunto,
                        pZona,
                        pPicking,
                        pArea,
                        pLocalizacion,
                        pInvcNbr,
                        pUsuario}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool Endenviar_mensaje_evento(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
    }
}
